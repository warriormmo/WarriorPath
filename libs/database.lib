<?php

  function db_getTableList($dbObj, $withFields = true){
    $tables = $dbObj->select('select TABLE_NAME AS ARRAY_KEY from information_schema.tables where TABLE_SCHEMA = ?',
      $dbObj->database_name);

    if ($withFields && is_array($tables)){
      foreach($tables as $key => $tbl_desc){
        $tbl = $key;
        $tbl_desc['name'] = $key;
        $fields = $dbObj->selectCol('select COLUMN_NAME from information_schema.columns where TABLE_NAME = ?', $tbl);
        $tbl_desc['fields'] = $fields;
        $tbl_desc['field_list'] = implode(',', $fields);
        $tables[$key] = $tbl_desc;
      }
    }

    return $tables;
  }

  function db_pholder(){
    return func_get_args();
  }

  function db_prepareWhereCase($dbObj, $where = array(), $allow_fields = array()){
    if (!$where) return '';
    if (!$allow_fields || !is_array($allow_fields)) return '';

    $_where = array();
    if (is_string($where)){
      $_where[0]= $where;
    } elseif (is_array($where)) {
      $postQuery = @$where['where'];
      unset($where['where']);
      $sql = array();
      foreach($where as $name => $value){
        $sql[] = ' ?# = ? ';
        $_where[] = $name;
        $_where[] = $value;
      }
      $sql = implode(' and ', $sql);
      array_unshift($_where, $sql);
      if ($postQuery){
        if (is_string($postQuery)){
          $_where[0] .= $postQuery;
        } elseif (is_array($postQuery)) {
          $_where[0] .= $postQuery[0];
          for($i=1;$i<count($postQuery);$i++)
            array_push($_where, $postQuery[$i]);
        }
      }
    }
    $dbObj->_expandPlaceholders($_where, false);
    return $_where[0];
  }

  function db_prepareQuery($dbObj, $table, &$fields, &$where){
    global $dbs_struct;
    if (!$dbObj) return cmn_errorOut('[db_select] ERROR: Incorrect dbObj', FAIL_ON_DB_ERROR);
    if (!$dbs_struct || !in_array($dbObj->database_name, array_keys($dbs_struct))) return cmn_errorOut('[db_select] ERROR: DB ('.$dbObj->database_name.') not found in dbs_struct', FAIL_ON_DB_ERROR);

    $tbl_desc = @$dbs_struct[$dbObj->database_name][$table];
    if (!$tbl_desc) return cmn_errorOut('[db_select] ERROR: Table ('.$table.') not found in dbs_struct', FAIL_ON_DB_ERROR);

    $tbl_fields = $tbl_desc['fields'];
    if (!$tbl_fields) return cmn_errorOut('[db_select] ERROR: Table\'s fields ('.$table.') not found in dbs_struct', FAIL_ON_DB_ERROR);

    $fields = $fields ? (is_array($fields) ? $fields : explode(',', $fields)) : $tbl_fields;
    foreach($fields as $k => $name)
      if (!in_array($name, $tbl_fields)) unset($fields[$k]);
    if (!$fields)  return cmn_errorOut('[db_select] ERROR: Filds list are empty', FAIL_ON_DB_ERROR);

    $where = db_prepareWhereCase($dbObj, $where, $tbl_fields);
    $where = $where ? ' and '.$where : '';
    return true;
  }

  function db_select($dbObj, $table, $fields=array(), $where=array()){
    if (!db_prepareQuery($dbObj, $table, $fields, $where)) return array();
    return $dbObj->select('select ?# from ?# where 1 '.$where, $fields, $table);
  }

  function db_selectRow($dbObj, $table, $fields=array(), $where=array()){
    if (!db_prepareQuery($dbObj, $table, $fields, $where)) return array();
    return $dbObj->selectRow('select ?# from ?# where 1 '.$where.' limit 0,1', $fields, $table);
  }

  function db_selectCol($dbObj, $table, $fields=array(), $where=array()){
    if (!db_prepareQuery($dbObj, $table, $fields, $where)) return array();
    return $dbObj->selectCol('select ?# from ?# where 1 '.$where, $fields, $table);
  }

  function db_selectCell($dbObj, $table, $fields=array(), $where=array()){
    if (!db_prepareQuery($dbObj, $table, $fields, $where)) return array();
    return $dbObj->selectCell('select ?# from ?# where 1 '.$where.' limit 0,1', $fields, $table);
  }

  function db_selectCount($dbObj, $table, $fields=array(), $where=array()){
    if (!db_prepareQuery($dbObj, $table, $fields, $where)) return array();
    return $dbObj->selectCell('select count(0) as iCount from ?# where 1 '.$where.' limit 0,1', $table);
  }

  function db_insert($dbObj, $table, $values, $fields = array()){
    $fields = array_keys($values);
    if (!db_prepareQuery($dbObj, $table, $fields, $where)) return array();

    foreach($values as $name => $value){
      if (!in_array($name, $fields))
        unset($values[$name]);
    }
    return $dbObj->query('insert into ?# set ?a ', $table, $values);
  }

  function db_update($dbObj, $table, $values, $fields = array(), $where=array()){
    $fields = array_keys($values);
    if (!db_prepareQuery($dbObj, $table, $fields, $where)) return array();

    foreach($values as $name => $value){
      if (!in_array($name, $fields))
        unset($values[$name]);
    }
    return $dbObj->query('update ?# set ?a where 1 '.$where, $table, $values);
  }

  function db_updateRow($dbObj, $table, $values, $fields = array(), $where=array()){
    if (!is_array($where)){
      $where .= ' LIMIT 1';
    } else {
      $where['where'][0] .= ' LIMIT 1';
    }
    return db_update($dbObj, $table, $values, $fields, $where);
  }

  function db_delete($dbObj, $table, $where=array()){
    $fields = array();
    if (!db_prepareQuery($dbObj, $table, $fields, $where)) return array();
    return $dbObj->query('delete from ?# where 1 '.$where, $table);
  }

  function db_deleteRow($dbObj, $table, $where=array()){
    if (!is_array($where)){
      $where .= ' LIMIT 1';
    } else {
      $where['where'][0] .= ' LIMIT 1';
    }
    return db_delete($dbObj, $table, $where);
  }
?>